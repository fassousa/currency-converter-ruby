name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, fagnner_sousa ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: currency_converter_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RAILS_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/currency_converter_test
      REDIS_URL: redis://localhost:6379/0
      CURRENCY_API_KEY: test_api_key_for_ci

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'
          bundler-cache: true
          working-directory: backend

      - name: Install dependencies
        run: |
          cd backend
          bundle install --jobs 4 --retry 3

      - name: Setup database
        run: |
          cd backend
          bin/rails db:create db:schema:load

      - name: Run RuboCop
        run: |
          cd backend
          bundle exec rubocop --parallel

      - name: Run tests
        run: |
          cd backend
          bundle exec rspec --format documentation

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: backend/coverage/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'
          bundler-cache: true
          working-directory: backend

      - name: Install dependencies
        run: |
          cd backend
          bundle install --jobs 4 --retry 3

      - name: Run Brakeman security scanner
        run: |
          cd backend
          bundle exec brakeman --no-pager --format plain

      - name: Run bundler-audit
        run: |
          cd backend
          gem install bundler-audit
          bundle audit check --update

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    
    # Only deploy on push to main branch (not on PRs)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://currencyconverter.duckdns.org

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # Switch to rails user and deploy
            su - rails << 'RAILSEOF'
            
            # Navigate to application directory
            cd currency-converter-ruby/backend
            
            # Store current git commit for rollback
            CURRENT_COMMIT=$(git rev-parse HEAD)
            echo "üìå Current commit: $CURRENT_COMMIT"
            echo "$CURRENT_COMMIT" > /tmp/pre-deploy-commit.txt
            
            # Pull latest changes (stash any local changes first)
            echo "üì• Pulling latest changes from main..."
            git fetch origin
            
            # Stash any local changes to avoid conflicts
            if ! git diff-index --quiet HEAD --; then
              echo "‚ö†Ô∏è  Local changes detected, stashing..."
              git stash
            fi
            
            git checkout main
            git pull origin main
            
            NEW_COMMIT=$(git rev-parse HEAD)
            echo "üìå New commit: $NEW_COMMIT"
            
            # Load environment variables
            export $(grep -v "^#" .env.production | grep -v "^$" | xargs)
            
            # Install dependencies
            echo "üì¶ Installing dependencies..."
            RAILS_ENV=production bundle install --without development test --jobs 4 --retry 3
            
            # Run database migrations
            echo "üóÑÔ∏è  Running database migrations..."
            RAILS_ENV=production bundle exec rails db:migrate
            
            # Precompile assets (if needed in future)
            # echo "üé® Precompiling assets..."
            # RAILS_ENV=production bundle exec rails assets:precompile
            
            echo "‚úÖ Rails deployment steps completed"
            
            RAILSEOF
            
            # Restart Puma service (as root)
            echo "üîÑ Restarting Puma service..."
            systemctl restart puma
            
            # Wait for Puma to start
            echo "‚è≥ Waiting for Puma to start..."
            sleep 8
            
            # Check Puma status first
            echo "üîç Checking Puma status..."
            systemctl status puma --no-pager || true
            
            # Health check with better error handling
            echo "üè• Running health check..."
            for i in {1..5}; do
              HEALTH_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" http://localhost/api/v1/health || echo "CONNECTION_FAILED")
              
              if echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
                echo "‚úÖ Health check passed on attempt $i!"
                echo "$HEALTH_RESPONSE"
                exit 0
              else
                echo "‚ö†Ô∏è  Attempt $i failed, response: $HEALTH_RESPONSE"
                if [ $i -lt 5 ]; then
                  echo "Waiting 3 seconds before retry..."
                  sleep 3
                fi
              fi
            done
            
            echo "‚ùå Health check failed after 5 attempts!"
            echo "Last response: $HEALTH_RESPONSE"
            
            # Show Puma logs for debugging
            echo "üìã Recent Puma logs:"
            journalctl -u puma -n 50 --no-pager
            
            exit 1

      - name: Create deployment record
        if: success()
        run: |
          echo "üìù Creating deployment record..."
          echo "Deployed commit: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Deployed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

      - name: Notify on success
        if: success()
        run: |
          echo "üéâ Deployment to production successful!"
          echo "Application is now live at https://currencyconverter.duckdns.org"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the logs and consider rolling back if necessary."

  # Optional: Rollback job that can be triggered manually
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    environment:
      name: production

    steps:
      - name: Rollback to previous commit
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            su - rails << 'EOF'
            cd currency-converter-ruby/backend
            
            if [ -f /tmp/pre-deploy-commit.txt ]; then
              PREVIOUS_COMMIT=$(cat /tmp/pre-deploy-commit.txt)
              echo "üîÑ Rolling back to commit: $PREVIOUS_COMMIT"
              git checkout $PREVIOUS_COMMIT
              
              export $(grep -v "^#" .env.production | grep -v "^$" | xargs)
              RAILS_ENV=production bundle install --without development test
              RAILS_ENV=production bundle exec rails db:migrate
            else
              echo "‚ùå No previous commit found!"
              exit 1
            fi
            EOF
            
            systemctl restart puma
            sleep 5
            
            curl -f -H "Content-Type: application/json" http://localhost/api/v1/health
