name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, fagnner_sousa ]
  pull_request:
    branches: [ main, develop ]

env:
  RUBY_VERSION: '3.3.5'
  BACKEND_DIR: backend

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: currency_converter_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RAILS_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/currency_converter_test
      REDIS_URL: redis://localhost:6379/0
      CURRENCY_API_KEY: test_api_key_for_ci

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ${{ env.BACKEND_DIR }}

      - name: Setup database
        working-directory: ${{ env.BACKEND_DIR }}
        run: bin/rails db:create db:schema:load

      - name: Run RuboCop
        working-directory: ${{ env.BACKEND_DIR }}
        run: bundle exec rubocop --parallel

      - name: Run tests
        working-directory: ${{ env.BACKEND_DIR }}
        run: bundle exec rspec --format documentation

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: ${{ env.BACKEND_DIR }}/coverage/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ${{ env.BACKEND_DIR }}

      - name: Run Brakeman
        working-directory: ${{ env.BACKEND_DIR }}
        run: bundle exec brakeman --no-pager --format plain

      - name: Run bundler-audit
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          gem install bundler-audit
          bundle audit check --update

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://currencyconverter.duckdns.org

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # Deploy as rails user
            su - rails << 'RAILSEOF'
            cd currency-converter-ruby/backend
            
            # Save current commit for rollback
            git rev-parse HEAD > /tmp/pre-deploy-commit.txt
            echo "üìå Current: $(cat /tmp/pre-deploy-commit.txt)"
            
            # Update code
            echo "üì• Updating code..."
            git fetch origin
            git diff-index --quiet HEAD -- || git stash
            git checkout main
            git reset --hard origin/main
            echo "üìå New: $(git rev-parse HEAD)"
            
            # Deploy
            echo "üì¶ Installing dependencies..."
            export $(grep -v "^#" .env.production | grep -v "^$" | xargs)
            RAILS_ENV=production bundle install --without development test --jobs 4 --retry 3
            
            echo "üóÑÔ∏è  Running migrations..."
            RAILS_ENV=production bundle exec rails db:migrate
            
            echo "‚úÖ Rails deployment completed"
            RAILSEOF
            
            # Verify and restart
            SOCKET="/home/rails/currency-converter-ruby/backend/tmp/sockets/puma.sock"
            NGINX_CONF="/etc/nginx/sites-available/currency-converter"
            
            echo "üîç Verifying Nginx configuration..."
            grep -q "unix://$SOCKET" "$NGINX_CONF" || {
              sed -i "s|unix://.*puma.sock|unix://$SOCKET|g" "$NGINX_CONF"
              nginx -t && systemctl reload nginx
            }
            
            echo "üîÑ Restarting Puma..."
            systemctl restart puma
            sleep 8
            
            # Health check
            echo "üè• Health check..."
            for i in {1..5}; do
              RESPONSE=$(curl -sf -H "Content-Type: application/json" -H "Accept: application/json" \
                -k https://currencyconverter.duckdns.org/api/v1/health\)
              
              if echo "$RESPONSE" | grep -q "healthy"; then
                echo "‚úÖ Deployment successful! ($RESPONSE)"
                exit 0
              fi
              
              [ $i -lt 5 ] && { echo "‚ö†Ô∏è  Retry $i/5..."; sleep 3; }
            done
            
            echo "‚ùå Health check failed!"
            journalctl -u puma -n 20 --no-pager
            exit 1

      - name: Deployment summary
        if: success()
        run: |
          echo "üéâ Deployed to https://currencyconverter.duckdns.org"
          echo "ÔøΩÔøΩ Commit: ${{ github.sha }}"
          echo "üë§ By: ${{ github.actor }}"

  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production

    steps:
      - name: Rollback to previous commit
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            su - rails << 'EOF'
            cd currency-converter-ruby/backend
            
            [ ! -f /tmp/pre-deploy-commit.txt ] && { echo "‚ùå No rollback point!"; exit 1; }
            
            PREV=$(cat /tmp/pre-deploy-commit.txt)
            echo "üîÑ Rolling back to: $PREV"
            git checkout $PREV
            
            export $(grep -v "^#" .env.production | grep -v "^$" | xargs)
            RAILS_ENV=production bundle install --without development test
            RAILS_ENV=production bundle exec rails db:migrate
            EOF
            
            systemctl restart puma
            sleep 5
            curl -sf -H "Content-Type: application/json" -H "Accept: application/json" \
              -k https://currencyconverter.duckdns.org/api/v1/health
